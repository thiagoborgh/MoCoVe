#!/usr/bin/env python3
"""
Script de Inicializa√ß√£o Completa - MoCoVe
Inicia todos os componentes do sistema de forma coordenada
"""

import subprocess
import os
import sys
import time
import json
import sqlite3
from datetime import datetime

# Configura√ß√£o
BACKEND_FILE = "backend/app_real.py"
SYSTEM_CONTROLLER = "system_controller.py"
DATABASE_FILE = "memecoin.db"
WATCHLIST_FILE = "coin_watchlist_expanded.json"

def print_header(title):
    print("\n" + "="*70)
    print(f"üöÄ {title}")
    print("="*70)

def check_file_exists(filepath):
    """Verificar se arquivo existe"""
    if os.path.exists(filepath):
        print(f"‚úÖ {filepath} - Encontrado")
        return True
    else:
        print(f"‚ùå {filepath} - N√ÉO ENCONTRADO!")
        return False

def check_dependencies():
    """Verificar depend√™ncias e arquivos necess√°rios"""
    print_header("VERIFICA√á√ÉO DE DEPEND√äNCIAS")
    
    required_files = [
        BACKEND_FILE,
        SYSTEM_CONTROLLER,
        WATCHLIST_FILE,
        "train_model.py",
        "populate_prices.py"
    ]
    
    all_files_exist = True
    
    for file in required_files:
        if not check_file_exists(file):
            all_files_exist = False
    
    # Verificar database
    if os.path.exists(DATABASE_FILE):
        print(f"‚úÖ {DATABASE_FILE} - Database encontrado")
        try:
            import sqlite3
            conn = sqlite3.connect(DATABASE_FILE)
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM prices")
            count = cursor.fetchone()[0]
            print(f"üìä Database tem {count} registros de pre√ßos")
            conn.close()
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar database: {e}")
    else:
        print(f"‚ùå {DATABASE_FILE} - Database N√ÉO ENCONTRADO!")
        all_files_exist = False
    
    # Verificar Python packages
    print("\nüì¶ Verificando pacotes Python...")
    required_packages = [
        'flask', 'requests', 'pandas', 'numpy', 
        'sqlite3', 'binance', 'sklearn'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            if package == 'sqlite3':
                import sqlite3
            elif package == 'sklearn':
                import sklearn
            elif package == 'binance':
                import binance
            else:
                __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - N√ÉO INSTALADO")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è Pacotes em falta: {', '.join(missing_packages)}")
        print("üí° Instale com: pip install " + " ".join(missing_packages))
        all_files_exist = False
    
    return all_files_exist

def setup_database():
    """Configurar database"""
    print_header("CONFIGURA√á√ÉO DO DATABASE")
    
    try:
        conn = sqlite3.connect(DATABASE_FILE)
        cursor = conn.cursor()
        
        # Verificar tabelas existentes
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
        tables = [row[0] for row in cursor.fetchall()]
        
        print(f"üìä Tabelas existentes: {', '.join(tables)}")
        
        # Criar tabelas do sistema se n√£o existirem
        system_tables = {
            'system_status': '''
                CREATE TABLE IF NOT EXISTS system_status (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp TEXT NOT NULL,
                    backend_running BOOLEAN,
                    binance_connected BOOLEAN,
                    ai_agent_active BOOLEAN,
                    watchlist_loaded BOOLEAN,
                    balance_updated TEXT,
                    market_data_fresh BOOLEAN,
                    error_count INTEGER DEFAULT 0,
                    warnings TEXT
                )
            ''',
            'account_balance': '''
                CREATE TABLE IF NOT EXISTS account_balance (
                    asset TEXT PRIMARY KEY,
                    free REAL,
                    locked REAL,
                    total REAL,
                    usd_value REAL,
                    last_updated TEXT
                )
            ''',
            'social_sentiment': '''
                CREATE TABLE IF NOT EXISTS social_sentiment (
                    symbol TEXT PRIMARY KEY,
                    avg_sentiment REAL,
                    total_mentions INTEGER,
                    sentiment_score_sum REAL,
                    last_updated TEXT
                )
            '''
        }
        
        for table_name, create_sql in system_tables.items():
            cursor.execute(create_sql)
            print(f"‚úÖ Tabela {table_name} configurada")
        
        # Inserir status inicial
        cursor.execute('''
            INSERT OR REPLACE INTO system_status 
            (timestamp, backend_running, binance_connected, ai_agent_active, 
             watchlist_loaded, balance_updated, market_data_fresh, error_count, warnings)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            datetime.now().isoformat(),
            False, False, False, False, 
            "Nunca", False, 0, "Sistema inicializando"
        ))
        
        conn.commit()
        conn.close()
        
        print("‚úÖ Database configurado com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar database: {e}")
        return False

def populate_initial_data():
    """Popular dados iniciais"""
    print_header("POPULANDO DADOS INICIAIS")
    
    try:
        # Executar script de popula√ß√£o de pre√ßos
        print("üìä Populando pre√ßos hist√≥ricos...")
        result = subprocess.run([sys.executable, "populate_prices.py"], 
                              capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ Pre√ßos hist√≥ricos carregados!")
        else:
            print(f"‚ö†Ô∏è Aviso ao carregar pre√ßos: {result.stderr}")
        
        return True
        
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è Timeout ao carregar dados - continuando...")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao popular dados: {e}")
        return True  # Continue mesmo com erro

def start_backend():
    """Iniciar backend"""
    print_header("INICIANDO BACKEND")
    
    try:
        print("üöÄ Iniciando servidor Flask...")
        print(f"üìÇ Executando: python {BACKEND_FILE}")
        print("üåê URL: http://localhost:5000")
        print("‚èπÔ∏è Para parar: Ctrl+C")
        
        # Iniciar processo em background
        process = subprocess.Popen([sys.executable, BACKEND_FILE])
        
        # Aguardar um pouco para o servidor inicializar
        print("‚è≥ Aguardando servidor inicializar...")
        time.sleep(3)
        
        # Verificar se processo ainda est√° rodando
        if process.poll() is None:
            print("‚úÖ Backend iniciado com sucesso!")
            print(f"üÜî Process ID: {process.pid}")
            return process
        else:
            print("‚ùå Backend falhou ao iniciar")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao iniciar backend: {e}")
        return None

def start_ai_trading_agent():
    """Iniciar AI Trading Agent"""
    print_header("INICIANDO AI TRADING AGENT")
    
    try:
        print("ü§ñ Iniciando AI Trading Agent...")
        print("üìÇ Executando: python ai_trading_agent.py")
        print("üí∞ MODO REAL - Trades reais ser√£o executados!")
        print("‚ö†Ô∏è Certifique-se de que suas configura√ß√µes est√£o corretas")
        
        # Verificar se arquivo existe
        if not os.path.exists("ai_trading_agent.py"):
            print("‚ùå Arquivo ai_trading_agent.py n√£o encontrado!")
            return None
        
        # Mostrar aviso de seguran√ßa
        print("\nüö® AVISO DE SEGURAN√áA:")
        print("üí∞ O AI Agent executar√° trades REAIS na Binance")
        print("üîß Configura√ß√µes atuais:")
        
        try:
            from ai_trading_config import TEST_MODE, MAX_POSITION_SIZE, MAX_DAILY_TRADES
            print(f"   üß™ Modo Teste: {'ATIVO' if TEST_MODE else 'DESATIVO (MODO REAL)'}")
            print(f"   üí∞ Valor m√°ximo por trade: ${MAX_POSITION_SIZE}")
            print(f"   üìà Trades m√°ximos por dia: {MAX_DAILY_TRADES}")
        except:
            print("   ‚ö†Ô∏è N√£o foi poss√≠vel ler configura√ß√µes")
        
        # Aguardar confirma√ß√£o
        print("\n‚ùì Confirma inicializa√ß√£o do AI Trading Agent? (digite 'SIM' para confirmar)")
        confirmacao = input("Confirma√ß√£o: ").strip().upper()
        
        if confirmacao != 'SIM':
            print("‚ùå Inicializa√ß√£o cancelada pelo usu√°rio")
            return None
        
        # Iniciar processo em background
        process = subprocess.Popen([sys.executable, "ai_trading_agent.py"])
        
        # Aguardar um pouco para o agente inicializar
        print("‚è≥ Aguardando AI Agent inicializar...")
        time.sleep(5)
        
        # Verificar se processo ainda est√° rodando
        if process.poll() is None:
            print("‚úÖ AI Trading Agent iniciado com sucesso!")
            print(f"üÜî Process ID: {process.pid}")
            print("üìä Monitore os logs em: ai_trading_agent.log")
            return process
        else:
            print("‚ùå AI Trading Agent falhou ao iniciar")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao iniciar AI Trading Agent: {e}")
        return None

def start_status_updater():
    """Iniciar atualizador de status"""
    print_header("INICIANDO ATUALIZADOR DE STATUS")
    
    try:
        print("üìä Iniciando atualizador de status...")
        print("üîÑ Manter√° o status do sistema sempre atualizado")
        
        # Verificar se arquivo existe
        if not os.path.exists("update_system_status.py"):
            print("‚ùå Arquivo update_system_status.py n√£o encontrado!")
            return None
        
        # Iniciar processo em background
        process = subprocess.Popen([sys.executable, "update_system_status.py"])
        
        # Aguardar um pouco para o atualizador inicializar
        print("‚è≥ Aguardando atualizador inicializar...")
        time.sleep(2)
        
        # Verificar se processo ainda est√° rodando
        if process.poll() is None:
            print("‚úÖ Atualizador de status iniciado com sucesso!")
            print(f"üÜî Process ID: {process.pid}")
            print("üîÑ Status ser√° atualizado automaticamente a cada 30s")
            return process
        else:
            print("‚ùå Atualizador de status falhou ao iniciar")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao iniciar atualizador de status: {e}")
        return None

def start_ai_trading_agent():
    """Iniciar IA Trading Agent"""
    print_header("INICIANDO IA TRADING AGENT")
    
    try:
        print("ü§ñ Iniciando IA Trading Agent...")
        print("üìÇ Executando: python ai_trading_agent_optimized.py")
        print("‚ö†Ô∏è MODO REAL - Trading ativo na Binance!")
        print("‚èπÔ∏è Para parar: Ctrl+C")
        
        # Iniciar processo em background
        process = subprocess.Popen([sys.executable, "ai_trading_agent_optimized.py"])
        
        # Aguardar um pouco para o agente inicializar
        print("‚è≥ Aguardando IA Agent inicializar...")
        time.sleep(5)
        
        # Verificar se processo ainda est√° rodando
        if process.poll() is None:
            print("‚úÖ IA Trading Agent iniciado com sucesso!")
            print(f"üÜî Process ID: {process.pid}")
            return process
        else:
            print("‚ùå IA Trading Agent falhou ao iniciar")
            return None
            
    except Exception as e:
        print(f"‚ùå Erro ao iniciar IA Trading Agent: {e}")
        return None

def validate_system():
    """Validar sistema ap√≥s inicializa√ß√£o"""
    print_header("VALIDA√á√ÉO DO SISTEMA")
    
    try:
        import requests
        
        # Aguardar mais tempo para inicializa√ß√£o completa
        print("‚è≥ Aguardando sistema estabilizar...")
        time.sleep(8)
        
        # Testar m√∫ltiplas tentativas com timeouts crescentes
        timeouts = [5, 10, 15]
        max_attempts = len(timeouts)
        
        for attempt, timeout in enumerate(timeouts):
            try:
                print(f"üß™ Teste {attempt + 1}/{max_attempts} (timeout: {timeout}s)...")
                response = requests.get("http://localhost:5000/api/system/status", timeout=timeout)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        print("‚úÖ Sistema respondendo corretamente!")
                        
                        # Testar favicon
                        try:
                            favicon_response = requests.get("http://localhost:5000/favicon.ico", timeout=3)
                            if favicon_response.status_code == 200:
                                print("üé® Favicon: ‚úÖ Funcionando")
                            else:
                                print(f"üé® Favicon: ‚ö†Ô∏è HTTP {favicon_response.status_code}")
                        except:
                            print("üé® Favicon: ‚ö†Ô∏è Erro")
                        
                        # Testar frontend
                        try:
                            frontend_response = requests.get("http://localhost:5000/", timeout=3)
                            if frontend_response.status_code == 200:
                                print("ÔøΩ Frontend: ‚úÖ Funcionando")
                            else:
                                print(f"ÔøΩ Frontend: ‚ö†Ô∏è HTTP {frontend_response.status_code}")
                        except:
                            print("ÔøΩ Frontend: ‚ö†Ô∏è Erro")
                        
                        print("‚úÖ Valida√ß√£o b√°sica conclu√≠da com sucesso!")
                        return True
                else:
                    print(f"‚ö†Ô∏è HTTP {response.status_code} na tentativa {attempt + 1}")
                    
            except requests.exceptions.Timeout:
                print(f"‚è∞ Timeout ({timeout}s) na tentativa {attempt + 1}")
                if attempt < max_attempts - 1:
                    print("‚è≥ Tentando com timeout maior...")
            except requests.exceptions.ConnectionError:
                print(f"üîå Erro de conex√£o na tentativa {attempt + 1}")
                if attempt < max_attempts - 1:
                    print("‚è≥ Aguardando servidor...")
                    time.sleep(3)
            except Exception as e:
                print(f"‚ùå Erro na tentativa {attempt + 1}: {e}")
                if attempt < max_attempts - 1:
                    time.sleep(2)
        
        print("‚ö†Ô∏è Todas as tentativas de valida√ß√£o falharam")
        print("üîç Mas o servidor pode estar funcionando (verifique manualmente)")
        
        # Retornar True para n√£o parar o sistema
        return True
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico na valida√ß√£o: {e}")
        print("‚ö†Ô∏è Continuando mesmo assim...")
        return True  # N√£o parar o sistema por erro de valida√ß√£o

def show_next_steps():
    """Mostrar pr√≥ximos passos"""
    print_header("PR√ìXIMOS PASSOS")
    
    print("üéØ Sistema MoCoVe iniciado com sucesso!")
    print("\nüìã Para usar o sistema:")
    print("1. üåê Abra: http://localhost:5000 (Backend API)")
    print("2. üìÅ Abra: frontend/index_complete_dashboard.html (Frontend)")
    print("3. üß™ Execute: python test_complete_system.py (Testes)")
    
    print("\nüîß Comandos √∫teis:")
    print("‚Ä¢ python test_complete_system.py       - Testar sistema completo")
    print("‚Ä¢ python test_system_status.py         - Testar e corrigir status")
    print("‚Ä¢ python train_model.py                - Treinar modelo de IA")
    print("‚Ä¢ python run_ai_pipeline.py            - Executar pipeline de IA")
    
    print("\nüìä Endpoints principais:")
    print("‚Ä¢ GET  /api/system/status              - Status do sistema")
    print("‚Ä¢ GET  /api/health                     - Health check do backend")
    print("‚Ä¢ POST /api/system/test-binance        - Testar Binance")
    print("‚Ä¢ GET  /api/watchlist/summary          - Resumo da watchlist")
    print("‚Ä¢ POST /api/system/start-ai-agent      - Iniciar AI Agent")
    
    print("\nüîÑ Componentes ativos:")
    print("‚Ä¢ Backend Flask                        - Porta 5000")
    print("‚Ä¢ AI Trading Agent                     - Trades automatizados")
    print("‚Ä¢ Atualizador de Status               - Status em tempo real")
    
    print("\n‚ö†Ô∏è Importante:")
    print("‚Ä¢ Configure suas chaves da Binance no arquivo .env")
    print("‚Ä¢ O sistema precisa estar rodando para funcionar")
    print("‚Ä¢ Use Ctrl+C para parar o servidor")
    print("‚Ä¢ Status ser√° atualizado automaticamente no dashboard")

def main():
    """Fun√ß√£o principal"""
    print("üéØ MoCoVe - Inicializa√ß√£o Completa do Sistema")
    print(f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # 1. Verificar depend√™ncias
        if not check_dependencies():
            print("\n‚ùå Depend√™ncias em falta - corrija antes de continuar")
            return False
        
        # 2. Configurar database
        if not setup_database():
            print("\n‚ùå Falha na configura√ß√£o do database")
            return False
        
        # 3. Popular dados iniciais
        populate_initial_data()
        
        # 4. Iniciar backend
        backend_process = start_backend()
        if not backend_process:
            print("\n‚ùå Falha ao iniciar backend")
            return False
        
        # 5. Iniciar AI Trading Agent
        ai_agent_process = start_ai_trading_agent()
        # N√£o interromper se usu√°rio cancelar o AI Agent
        
        # 6. Iniciar atualizador de status
        status_updater_process = start_status_updater()
        
        # 7. Validar sistema
        if validate_system():
            show_next_steps()
            
            # Manter processo rodando
            print("\nüîÑ Sistema rodando... (Ctrl+C para parar)")
            try:
                # Aguardar qualquer processo terminar
                processes = [backend_process]
                if ai_agent_process:
                    processes.append(ai_agent_process)
                if status_updater_process:
                    processes.append(status_updater_process)
                
                while any(p.poll() is None for p in processes):
                    time.sleep(1)
                    
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Parando sistema...")
                backend_process.terminate()
                if ai_agent_process:
                    ai_agent_process.terminate()
                if status_updater_process:
                    status_updater_process.terminate()
                
                # Aguardar processos terminarem
                backend_process.wait()
                if ai_agent_process:
                    ai_agent_process.wait()
                if status_updater_process:
                    status_updater_process.wait()
                    
                print("‚úÖ Sistema parado!")
        else:
            print("\n‚ö†Ô∏è Sistema com problemas na valida√ß√£o, mas pode estar funcionando")
            print("üåê Teste manualmente: http://localhost:5000")
            print("üé® Favicon: http://localhost:5000/favicon.ico")
            
            # Perguntar se quer continuar mesmo assim
            show_next_steps()
            
            print("\nüîÑ Sistema rodando mesmo com avisos... (Ctrl+C para parar)")
            try:
                # Aguardar qualquer processo terminar
                processes = [backend_process]
                if ai_agent_process:
                    processes.append(ai_agent_process)
                if status_updater_process:
                    processes.append(status_updater_process)
                
                while any(p.poll() is None for p in processes):
                    time.sleep(1)
                    
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Parando sistema...")
                backend_process.terminate()
                if ai_agent_process:
                    ai_agent_process.terminate()
                if status_updater_process:
                    status_updater_process.terminate()
                
                # Aguardar processos terminarem
                backend_process.wait()
                if ai_agent_process:
                    ai_agent_process.wait()
                if status_updater_process:
                    status_updater_process.wait()
                    
                print("‚úÖ Sistema parado!")
        
        return True
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Inicializa√ß√£o interrompida pelo usu√°rio")
        return False
    except Exception as e:
        print(f"\n‚ùå Erro durante inicializa√ß√£o: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
